#!/bin/bash

set -o errexit #tells the script to exit immediately if the command exits with the non-zero status

set -o pipefail #the script will consider the pipeline as failed if any of the commands in the pipeline fail

set -o nounset #tells the script to exit if any uninitialized variable is used. helps datch errors related to using variables that have not been set.

if [ -z "${POSTGRES_USER}"]; then
    base_postgres_image_default_user='postgres'
    export POSTGRES_USER=${base_postgres_image_default_user}
fi

export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"

python << END

import sys
import time
import psycopg2
suggest_unrecoverable_after = 30
start = time.time()
while True:
    try :
        psycopg2.connect(
            dbname="${POSTGRES_DB}",
            user="${POSTGRES_USER}",
            password="${POSTGRES_PASSWORD}",
            host="${POSTGRES_HOST}",
            port="${POSTGRES_PORT}",
        )
        break
    except psycopg2.OperationalError as error:
        sys.stderr.write("Waiting for PostgreSQL to become available...\n")
        if time.time() - start > suggest_unreoverable_after:
            sys.stderr.write("This is taking longer than expected... Might be indicative of an unrecoverable error: '{}'\n".format(error))
    time.sleep(1)

END

>&2 echo "PostgreSQL is available"

exec "$@"