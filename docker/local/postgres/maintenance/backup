#! /usr/bin/env bash

# This option, also known as set -e, tells the shell to exit immediately if any command returns a non-zero exit status
set -o errexit
# This option, also known as set -u, causes the shell to treat unset variables as errors. 
# If a variable is used before it's assigned a value, the script will exit with an error. 
set -o nounset
# This option tells the shell to consider a pipeline of commands as failed if any command in the pipeline fails, not just the last one.
set -o pipefail

working_dir="$(dirname ${0})"

# By using source, any variables, constants, or functions defined in constants.sh and messages.sh become accessible in this script. 
source "${working_dir}/_sourced/constants.sh"
source "${working_dir}/_sourced/messages.sh"

message_welcome "Backing up the ${POSTGRES_DB} database..."

if [ "${POSTGRES_USER}" == "postgres" ] 
then
  message_error "BAcking up as 'postgres' user is not allowed. Assign 'POSTGRES_USER' env with another one and try again."
  exit 1
fi

export PGHOST=${POSTGRES_HOST}
export PGPORT=${POSTGRES_PORT}
export PGUSER=${POSTGRES_USER}
export PGPASSWORD=${POSTGRES_PASSWORD}
export PGDATABASE=${POSTGRES_DB}

backup_filename="${BACKUP_FILE_PREFIX}_$(date +'%Y_%m_%dT%H_%M_%S').sql.gz"

pg_dump | gzip > "${BACKUP_DIR_PATH}/${backup_filename}"

message_success "'${POSTGRES_DB}' database backup '${backup_filename}' has been created sucessfully and place in '${BACKUP_DIR_PATH}"